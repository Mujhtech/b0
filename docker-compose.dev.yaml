version: '3.9'
services:
  db:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: b0
      POSTGRES_USER: b0
      POSTGRES_DB: b0

  redis:
    image: redis
    container_name: b0-redis
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - 6379:6379
    volumes:
      - redis_data:/data

  db-migration:
    container_name: b0-db-migration
    build:
      context: ./backend
      dockerfile: Dockerfile
    entrypoint: ["./b0", "migrate", "up"]
    depends_on:
      - db
    env_file:
      - .env
    ports:
      - 5555:5555
    environment:
      - DB_DRIVER=postgres
      - DB_USER=b0
      - DB_PASSWORD=b0
      - DB_DATABASE=b0
      - DB_HOST=db
      - DB_PORT=5432
    volumes:
      - ./backend/src:/app/src

  backend:
    container_name: b0-api
    build:
      context: ./backend
      dockerfile: Dockerfile
    entrypoint: ["./b0", "server"]
    depends_on:
      db:
        condition: service_started
      redis:
        condition: service_started
      db-migration:
        condition: service_completed_successfully
    env_file:
      - .env
    ports:
      - 5555:5555
    environment:
      - DB_DRIVER=postgres
      - DB_USER=b0
      - DB_PASSWORD=b0
      - DB_DATABASE=b0
      - DB_HOST=db
      - DB_PORT=5432
    volumes:
      - ./backend/src:/app/src

  frontend:
    container_name: b0-frontend
    restart: unless-stopped
    depends_on:
      - backend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend/src:/app/src/ # mounted whole src to avoid missing reload on new files
      - ./frontend/public:/app/public
    env_file: .env
    environment:
      - NODE_ENV=development
      - SESSION_SECRET=b0

  traefik:
    container_name: b0-traefik
    image: traefik:v3.3
    command: --api.insecure=true --providers.docker
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

volumes:
  postgres-data:
    driver: local
  redis_data:
    driver: local